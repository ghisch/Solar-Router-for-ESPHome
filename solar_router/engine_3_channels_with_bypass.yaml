# ----------------------------------------------------------------------------------------------------
# User interaction
# ----------------------------------------------------------------------------------------------------
<<: !include engine_common.yaml

switch:
  # Define if router is active or not
  - platform: template
    name: "Activate Solar Routing"
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    id: activate
    on_turn_on:
      then:
        - light.turn_on: green_led
        - lambda: id(power_meter_activated) = 1;
    on_turn_off:
      then:
        - light.turn_off: green_led
        - number.to_min: regulator_opening
        - switch.turn_off: relay_1
        - switch.turn_off: relay_2
        - switch.turn_off: relay_3
        - lambda: |- 
            id(real_power).publish_state(NAN);
            id(power_meter_activated) = 0;

  # Define the three mechanical relays
  - platform: template
    name: "Relay 1"
    id: relay_1
    optimistic: true
    on_turn_on:
      then:
        - script.execute: relay_1_control
    on_turn_off:
      then:
        - script.execute: relay_1_control

  - platform: template
    name: "Relay 2"
    id: relay_2
    optimistic: true
    on_turn_on:
      then:
        - script.execute: relay_2_control
    on_turn_off:
      then:
        - script.execute: relay_2_control

  # Relay 3 is the relay with the triac plugged in
  - platform: template
    name: "Relay 3"
    id: relay_3
    optimistic: true
    on_turn_on:
      then:
        - script.execute: relay_3_control
        - number.to_min: regulator_opening
    on_turn_off:
      then:
        - script.execute: relay_3_control

number:
  # Regulator opening value
  - platform: template
    name: "Regulator Opening"
    id: regulator_opening
    min_value: 0
    max_value: 100
    step: 1
    unit_of_measurement: "%"
    optimistic: True
    mode: slider
    on_value:
      then:
        - script.execute: regulation_control

  # Other number components remain the same as in original file
  - platform: template
    name: "Reactivity"
    id: reactivity
    optimistic: True
    restore_value: True
    mode: box
    min_value: 1
    max_value: 100
    initial_value: 10
    step: 1

  - platform: template
    name: "Target grid exchange"
    id: target_grid_exchange
    optimistic: True
    restore_value: True
    mode: box
    min_value: -99999
    max_value: 99999
    initial_value: 0
    unit_of_measurement: "W"
    step: 1

script:
  - id: energy_regulation
    mode: single
    then:
      - lambda: |-
          if (isnan(id(real_power).state) || id(safety_limit)) {
            id(regulator_opening).publish_state(0);
            id(relay_1).turn_off();
            id(relay_2).turn_off();
            id(relay_3).turn_off();
            return;
          }

          double regulator_status = id(regulator_opening).state;

          if (id(relay_1).state && !id(relay_2).state && !id(relay_3).state) {
            // R1 ON; R2 R3 OFF
            regulator_status += 100;
          } else if (id(relay_1).state && id(relay_2).state && !id(relay_3).state) {
            // R1 R2 ON; R3 OFF
            regulator_status += 200;
          } else if (id(relay_1).state && id(relay_2).state && id(relay_3).state) {
            // R1 R2 R3 ON;
            regulator_status = 300;
          }

          // Delta is computed for [0;100] but here regulator_status is [0;300]
          double delta = -1*(id(real_power).state-id(target_grid_exchange).state)*id(reactivity).state/1000;
          regulator_status += delta * 3;
          regulator_status = std::max(0.0, std::min(300.0, regulator_status));

          // Manage relays based on regulator_status
          // Something to explore:
          // GPIO.out_w1ts = (1 << ${relay_1_pin}) | (1 << ${relay_2_pin}) | (1 << ${relay_3_pin});
          // GPIO.out_w1tc = (1 << ${relay_1_pin}) | (1 << ${relay_2_pin}) | (1 << ${relay_3_pin});
          if (regulator_status >= 300.0) {
            // Third stage: All relays on, regulator at 0
            id(relay_1).turn_on();
            id(relay_2).turn_on();
            id(relay_3).turn_on();
            id(regulator_opening).publish_state(0);

          } else if (regulator_status >= 200.0) {
            // Second stage: First regulate remaining power, two relays on
            id(regulator_opening).publish_state(regulator_status - 200);
            id(relay_1).turn_on();
            id(relay_2).turn_on();
            id(relay_3).turn_off();

          } else if (regulator_status >= 100.0) {
            // First stage: First regulate remaining power, one relay on 
            id(regulator_opening).publish_state(regulator_status - 100);
            id(relay_1).turn_on();
            id(relay_2).turn_off();
            id(relay_3).turn_off();
            
          } else {
            // Base stage: All relays off, regulate base power
            id(regulator_opening).publish_state(regulator_status);
            id(relay_1).turn_off();
            id(relay_2).turn_off();
            id(relay_3).turn_off();
          } 
